networks:
  app-network:
    driver: bridge
  monitoring:
    external: true
services:
  pokedex-db:
    image: postgres
    volumes:
      - ./docker_ressources/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pg_pokedex_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build: .
    ports:
      - "8080:8080"
    environment:
      # Use the Docker service DNS name and container port for DB connectivity inside the network
      POSTGRES_CONNECTION_STRING: "Host=pokedex-db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}"
      # JWT settings for the API (keep secret out of the image; provide via .env)
      JWT__secret: "${JWT__secret}"
      # Optional: enable Swagger UI even outside Development
      Swagger__Enabled: "true"
      # Redis connection for caching
      REDIS_CONNECTION: "redis:6379"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      pokedex-db:
        condition: service_healthy
    networks:
      - app-network

  redis:
    # image: redis:7-alpine
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    networks:
      - app-network

  prometheus:
    # image: prom/prometheus:v2.52.0
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    # environment:
    #   - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
    #   - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
    #   - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  pg_pokedex_data:
  redis-data:
  grafana-storage: