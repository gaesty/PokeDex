BEGIN;

-- Normalise la casse des PK préexistantes (Id -> id) si besoin
DO $$
DECLARE
  tbl text;
BEGIN
  FOREACH tbl IN ARRAY ARRAY['types','abilities','moves','species','media','pokemon','stats','evolutions','teams']
  LOOP
    IF EXISTS (
      SELECT 1 FROM information_schema.columns
      WHERE table_schema = current_schema() AND table_name = tbl AND column_name = 'Id'
    ) AND NOT EXISTS (
      SELECT 1 FROM information_schema.columns
      WHERE table_schema = current_schema() AND table_name = tbl AND column_name = 'id'
    ) THEN
      EXECUTE format('ALTER TABLE %I RENAME COLUMN "Id" TO "id";', tbl);
    END IF;
  END LOOP;
END $$;

-- Compat colonnes si tables déjà présentes
ALTER TABLE IF EXISTS "species"   ADD COLUMN IF NOT EXISTS "region" VARCHAR(50);
ALTER TABLE IF EXISTS "teams"     ADD COLUMN IF NOT EXISTS "owner"  VARCHAR(100);
ALTER TABLE IF EXISTS "types"     ADD COLUMN IF NOT EXISTS "description" TEXT;
ALTER TABLE IF EXISTS "abilities" ADD COLUMN IF NOT EXISTS "description" TEXT;
ALTER TABLE IF EXISTS "moves"
  ADD COLUMN IF NOT EXISTS "name" TEXT,
  ADD COLUMN IF NOT EXISTS "category" VARCHAR(50),
  ADD COLUMN IF NOT EXISTS "type_id" INT;
ALTER TABLE IF EXISTS "media"     ADD COLUMN IF NOT EXISTS "note" TEXT;

-- Compat: s'assurer que les colonnes essentielles de "pokemon" existent
ALTER TABLE IF EXISTS "pokemon"
  ADD COLUMN IF NOT EXISTS "name" TEXT,
  ADD COLUMN IF NOT EXISTS "is_legendary" BOOLEAN NOT NULL DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS "species_id" INT,
  ADD COLUMN IF NOT EXISTS "image_id" INT;

-- Compat: créer la table attendue par EF ("Pokemons") si absente
CREATE TABLE IF NOT EXISTS "Pokemons" (
  "Id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Name" TEXT NULL,
  "IsLegendary" BOOLEAN NOT NULL DEFAULT FALSE
);

-- Table simple utilisée par l’API actuelle (EF Core, entité Pokemon)
-- (conservée pour compat, mais EF utilisera "Pokemons")
CREATE TABLE IF NOT EXISTS "Pokemon" (
  "Id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Name" TEXT NULL,
  "IsLegendary" BOOLEAN NOT NULL DEFAULT FALSE
);

-- Schéma relationnel étendu
CREATE TABLE IF NOT EXISTS "species" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "region" VARCHAR(50) UNIQUE
);

CREATE TABLE IF NOT EXISTS "media" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "note" TEXT
);

CREATE TABLE IF NOT EXISTS "types" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "description" TEXT UNIQUE
);

CREATE TABLE IF NOT EXISTS "abilities" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "description" TEXT UNIQUE
);

CREATE TABLE IF NOT EXISTS "moves" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE,
  "category" VARCHAR(50),
  "type_id" INT,
  CONSTRAINT "fk_moves_type" FOREIGN KEY ("type_id") REFERENCES "types" ("id") ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS "pokemon" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE,
  "is_legendary" BOOLEAN NOT NULL DEFAULT FALSE,
  "species_id" INT,
  "image_id" INT,
  CONSTRAINT "fk_pokemon_species" FOREIGN KEY ("species_id") REFERENCES "species" ("id") ON DELETE SET NULL,
  CONSTRAINT "fk_pokemon_media"   FOREIGN KEY ("image_id")   REFERENCES "media"   ("id") ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS "stats" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "pokemon_id" INT UNIQUE,
  "speed" INT,
  CONSTRAINT "fk_stats_pokemon" FOREIGN KEY ("pokemon_id") REFERENCES "pokemon" ("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "evolutions" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "from_pokemon_id" INT,
  "to_pokemon_id" INT,
  "condition" TEXT,
  CONSTRAINT "fk_evo_from" FOREIGN KEY ("from_pokemon_id") REFERENCES "pokemon" ("id") ON DELETE CASCADE,
  CONSTRAINT "fk_evo_to"   FOREIGN KEY ("to_pokemon_id")   REFERENCES "pokemon" ("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "pokemon_types" (
  "pokemon_id" INT NOT NULL,
  "type_id" INT NOT NULL,
  PRIMARY KEY ("pokemon_id", "type_id"),
  CONSTRAINT "fk_pt_pokemon" FOREIGN KEY ("pokemon_id") REFERENCES "pokemon" ("id") ON DELETE CASCADE,
  CONSTRAINT "fk_pt_type"    FOREIGN KEY ("type_id")    REFERENCES "types"   ("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "pokemon_abilities" (
  "pokemon_id" INT NOT NULL,
  "ability_id" INT NOT NULL,
  PRIMARY KEY ("pokemon_id", "ability_id"),
  CONSTRAINT "fk_pa_pokemon" FOREIGN KEY ("pokemon_id") REFERENCES "pokemon"   ("id") ON DELETE CASCADE,
  CONSTRAINT "fk_pa_ability" FOREIGN KEY ("ability_id") REFERENCES "abilities" ("id") ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS "teams" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "owner" VARCHAR(100) UNIQUE
);

CREATE TABLE IF NOT EXISTS "team_pokemons" (
  "team_id" INT NOT NULL,
  "pokemon_id" INT NOT NULL,
  PRIMARY KEY ("team_id", "pokemon_id"),
  CONSTRAINT "fk_tp_team"    FOREIGN KEY ("team_id")   REFERENCES "teams"   ("id") ON DELETE CASCADE,
  CONSTRAINT "fk_tp_pokemon" FOREIGN KEY ("pokemon_id") REFERENCES "pokemon" ("id") ON DELETE CASCADE
);

-- Index utiles
CREATE INDEX IF NOT EXISTS "ix_pokemon_species" ON "pokemon" ("species_id");
CREATE INDEX IF NOT EXISTS "ix_pokemon_image"   ON "pokemon" ("image_id");
CREATE INDEX IF NOT EXISTS "ix_moves_type"      ON "moves"   ("type_id");

-- Contraintes uniques pour ON CONFLICT
CREATE UNIQUE INDEX IF NOT EXISTS "ux_types_description"      ON "types" ("description");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_abilities_description"  ON "abilities" ("description");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_moves_name"             ON "moves" ("name");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_species_region"         ON "species" ("region");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_teams_owner"            ON "teams" ("owner");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_pokemon_name"           ON "pokemon" ("name");
CREATE UNIQUE INDEX IF NOT EXISTS "ux_stats_pokemon"          ON "stats" ("pokemon_id");

-- SEED de base (idempotent)
DO $$
DECLARE
  t_grass   INT; t_poison INT; t_fire INT; t_water INT; t_electric INT; t_psychic INT;
  a_overgrow INT; a_blaze INT; a_torrent INT; a_static INT; a_pressure INT;
  s_kanto INT;
  m_default INT;
  p_bulba INT; p_char INT; p_squir INT; p_pika INT; p_mewtwo INT;
BEGIN
  -- Types
  INSERT INTO "types" ("description") VALUES
    ('Grass'), ('Poison'), ('Fire'), ('Water'), ('Electric'), ('Psychic')
  ON CONFLICT ("description") DO NOTHING;

  SELECT id INTO t_grass    FROM "types" WHERE description='Grass';
  SELECT id INTO t_poison   FROM "types" WHERE description='Poison';
  SELECT id INTO t_fire     FROM "types" WHERE description='Fire';
  SELECT id INTO t_water    FROM "types" WHERE description='Water';
  SELECT id INTO t_electric FROM "types" WHERE description='Electric';
  SELECT id INTO t_psychic  FROM "types" WHERE description='Psychic';

  -- Abilities
  INSERT INTO "abilities" ("description") VALUES
    ('Overgrow'), ('Blaze'), ('Torrent'), ('Static'), ('Pressure')
  ON CONFLICT ("description") DO NOTHING;

  SELECT id INTO a_overgrow FROM "abilities" WHERE description='Overgrow';
  SELECT id INTO a_blaze    FROM "abilities" WHERE description='Blaze';
  SELECT id INTO a_torrent  FROM "abilities" WHERE description='Torrent';
  SELECT id INTO a_static   FROM "abilities" WHERE description='Static';
  SELECT id INTO a_pressure FROM "abilities" WHERE description='Pressure';

  -- Species / Media
  INSERT INTO "species" ("region") VALUES ('Kanto') ON CONFLICT ("region") DO NOTHING;
  SELECT id INTO s_kanto FROM "species" WHERE region='Kanto';

  INSERT INTO "media" ("note") VALUES ('placeholder') ON CONFLICT DO NOTHING;
  SELECT id INTO m_default FROM "media" ORDER BY id LIMIT 1;

  -- Moves de base
  INSERT INTO "moves" ("name","category","type_id") VALUES
    ('Vine Whip','Physical',t_grass),
    ('Ember','Special',t_fire),
    ('Water Gun','Special',t_water),
    ('Thunderbolt','Special',t_electric),
    ('Confusion','Special',t_psychic)
  ON CONFLICT ("name") DO NOTHING;

  -- Pokemon (relationnel)
  INSERT INTO "pokemon" ("name","is_legendary","species_id","image_id") VALUES
    ('Bulbasaur', FALSE, s_kanto, m_default),
    ('Charmander', FALSE, s_kanto, m_default),
    ('Squirtle', FALSE, s_kanto, m_default),
    ('Pikachu', FALSE, s_kanto, m_default),
    ('Mewtwo', TRUE, s_kanto, m_default)
  ON CONFLICT ("name") DO NOTHING;

  SELECT id INTO p_bulba  FROM "pokemon" WHERE name='Bulbasaur';
  SELECT id INTO p_char   FROM "pokemon" WHERE name='Charmander';
  SELECT id INTO p_squir  FROM "pokemon" WHERE name='Squirtle';
  SELECT id INTO p_pika   FROM "pokemon" WHERE name='Pikachu';
  SELECT id INTO p_mewtwo FROM "pokemon" WHERE name='Mewtwo';

  -- Types par pokémon
  INSERT INTO "pokemon_types" ("pokemon_id","type_id") VALUES
    (p_bulba, t_grass),
    (p_bulba, t_poison),
    (p_char,  t_fire),
    (p_squir, t_water),
    (p_pika,  t_electric),
    (p_mewtwo,t_psychic)
  ON CONFLICT DO NOTHING;

  -- Abilities par pokémon
  INSERT INTO "pokemon_abilities" ("pokemon_id","ability_id") VALUES
    (p_bulba,  a_overgrow),
    (p_char,   a_blaze),
    (p_squir,  a_torrent),
    (p_pika,   a_static),
    (p_mewtwo, a_pressure)
  ON CONFLICT DO NOTHING;

  -- Stats simples
  INSERT INTO "stats" ("pokemon_id","speed") VALUES
    (p_bulba, 45),
    (p_char,  65),
    (p_squir, 43),
    (p_pika,  90),
    (p_mewtwo,130)
  ON CONFLICT ("pokemon_id") DO NOTHING;

  -- Team démo
  INSERT INTO "teams" ("owner") VALUES ('Ash') ON CONFLICT ("owner") DO NOTHING;
  INSERT INTO "team_pokemons" ("team_id","pokemon_id")
    SELECT t.id, p.id
    FROM "teams" t, LATERAL (SELECT id FROM "pokemon" WHERE name IN ('Pikachu','Bulbasaur','Charmander','Squirtle')) p
    WHERE t.owner='Ash'
  ON CONFLICT DO NOTHING;

  -- Seed pour la table EF "Pokemons" (au lieu de "Pokemon")
  INSERT INTO "Pokemons" ("Name","IsLegendary") VALUES
    ('Bulbasaur', FALSE),
    ('Charmander', FALSE),
    ('Squirtle', FALSE),
    ('Pikachu', FALSE),
    ('Mewtwo', TRUE)
  ON CONFLICT DO NOTHING;
END $$;

COMMIT;